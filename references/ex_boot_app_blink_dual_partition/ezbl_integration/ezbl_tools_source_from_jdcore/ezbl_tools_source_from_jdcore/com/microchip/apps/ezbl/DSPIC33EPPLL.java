package com.microchip.apps.ezbl;
































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































class DSPIC33EPPLL
{
  int inputHz = 7370000;
  int PLLPRE = 0;
  int PLLPOST = 1;
  int PLLFBD = 50;
  int outputFcy = inputHz / (PLLPRE + 2) * (PLLFBD + 2) / (PLLPOST + 2);
  int errorFcy = 0;
  double errorPercent = 0.0D;
  










  DSPIC33EPPLL() {}
  









  void FindOptimalPLLSettings(String deviceName, int refInputClock, int targetOutputFCY, int minOutputFCY, int maxOutputFCY)
  {
    inputHz = refInputClock;
    this.PLLFBD = 0;
    this.PLLPOST = 0;
    this.PLLPRE = 0;
    outputFcy = (inputHz / (this.PLLPRE + 2) * (this.PLLFBD + 2) / (this.PLLPOST + 2) / 2);
    errorFcy = (targetOutputFCY - errorFcy);
    errorPercent = (errorFcy * 100.0D / targetOutputFCY);
    
    int bestErrorAbs = Integer.MAX_VALUE;
    for (int PLLPRE = 0; PLLPRE < 32; PLLPRE++)
    {
      int FVCOIN = refInputClock / (PLLPRE + 2);
      if (FVCOIN < 800000) {
        break;
      }
      
      if (FVCOIN <= 8000000)
      {


        for (int PLLFBD = 120000000 / FVCOIN - 2; PLLFBD < 512; PLLFBD++)
        {
          int FVCOOut = FVCOIN * (PLLFBD + 2);
          if (FVCOOut >= 120000000)
          {


            if (FVCOOut > 340000000) {
              break;
            }
            

            int lastErrorAbs = Integer.MAX_VALUE;
            for (int PLLPOST = 0; PLLPOST < 8; PLLPOST++)
            {
              int FOSC = FVCOOut / (2 * (PLLPOST + 1));
              int FCYOut = FOSC / 2;
              if (FCYOut < minOutputFCY) {
                break;
              }
              
              if (FCYOut <= maxOutputFCY)
              {


                int currentError = FCYOut - targetOutputFCY;
                int currentErrorAbs = currentError < 0 ? -currentError : currentError;
                if (lastErrorAbs < currentErrorAbs) {
                  break;
                }
                
                lastErrorAbs = currentErrorAbs;
                
                if (currentErrorAbs < bestErrorAbs)
                {
                  bestErrorAbs = currentErrorAbs;
                  errorFcy = currentError;
                  this.PLLPRE = PLLPRE;
                  this.PLLPOST = PLLPOST;
                  this.PLLFBD = PLLFBD;
                  outputFcy = FCYOut;
                  errorPercent = (errorFcy * 100.0D / targetOutputFCY);
                }
                if (currentError == 0)
                {
                  return;
                }
              }
            }
          }
        }
      }
    }
  }
}
