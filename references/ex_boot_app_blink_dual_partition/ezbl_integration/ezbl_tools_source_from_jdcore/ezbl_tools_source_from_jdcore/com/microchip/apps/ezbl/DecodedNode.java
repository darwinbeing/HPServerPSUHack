package com.microchip.apps.ezbl;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;





































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































class DecodedNode
{
  Node node;
  String tagName;
  LinkedHashMap<String, String> attribs = new LinkedHashMap();
  LinkedHashMap<String, DecodedNode> children = null;
  
  public DecodedNode()
  {
    node = null;
    tagName = null;
  }
  
  public DecodedNode(Node node)
  {
    this.node = node;
    tagName = node.getNodeName();
    NamedNodeMap attribs = node.getAttributes();
    if (attribs != null)
    {
      for (int i = 0; i < attribs.getLength(); i++)
      {
        String val = attribs.item(i).getNodeValue();
        if (val == null)
          val = "";
        this.attribs.put(attribs.item(i).getNodeName(), val);
      }
    }
  }
  
  public Integer getAttrAsInt(String attribName)
  {
    if (!attribs.containsKey(attribName))
      return null;
    return Integer.decode((String)attribs.get(attribName));
  }
  
  public int getAttrAsInt(String attribName, int defaultValue) {
    if (!attribs.containsKey(attribName))
      return defaultValue;
    return Integer.decode((String)attribs.get(attribName)).intValue();
  }
  
  public Long getAttrAsLong(String attribName) {
    if (!attribs.containsKey(attribName))
      return null;
    return Long.decode((String)attribs.get(attribName));
  }
  
  public long getAttrAsLong(String attribName, long defaultValue) {
    if (!attribs.containsKey(attribName))
      return defaultValue;
    return Long.decode((String)attribs.get(attribName)).longValue();
  }
  
  public String getAttrAsString(String attribName, String defaultValue) {
    if (!attribs.containsKey(attribName))
      return defaultValue;
    return (String)attribs.get(attribName);
  }
  
  public String getAttrAsString(String attribName) {
    return (String)attribs.get(attribName);
  }
  
  public String toString()
  {
    List<String> ret = new ArrayList();
    ret.add("<" + tagName);
    for (String key : attribs.keySet())
    {
      ret.add(key + "=" + (String)attribs.get(key));
    }
    return Multifunction.CatStringList(ret, " ") + ">";
  }
}
