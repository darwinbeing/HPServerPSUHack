package com.microchip.apps.ezbl;

import java.util.Comparator;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































class PICNameComparator
  implements Comparator<String>
{
  PICNameComparator() {}
  
  public int compare(String x, String y)
  {
    if (x.equals(y))
    {
      return 0;
    }
    
    if ((x.endsWith("*")) && (!y.endsWith("*")))
    {
      return -1;
    }
    if ((y.endsWith("*")) && (!x.endsWith("*")))
    {
      return 1;
    }
    if ((x.endsWith(" family")) && (!y.endsWith(" family")))
    {
      return -1;
    }
    if ((y.endsWith(" family")) && (!x.endsWith(" family")))
    {
      return 1;
    }
    
    String[] devClass = new String[2];
    String[] memSize = new String[2];
    Integer[] memSizeInt = new Integer[2];
    String[] featureSet = new String[2];
    String[] featureSetNum = new String[2];
    String[] pinoutCode = new String[2];
    Integer[] pinoutCodeInt = new Integer[2];
    String[] suffix = new String[2];
    Pattern p = Pattern.compile("(?<devClass>(dsPIC30|dsPIC33|PIC24)[^0-9]+)(?<memSize>[0-9]*)(?<featureSet>[a-zA-Z]*)(?<featureSetNum>[0-9]{0,1})(?<pinoutCode>[0-9]*)(?<suffix>.*)", 32);
    

    for (int i = 0; i < 2; i++)
    {
      String s = i == 0 ? x : y;
      Matcher m = p.matcher(s);
      if (!m.find())
      {
        return x.compareTo(y);
      }
      devClass[i] = m.group("devClass");
      memSize[i] = m.group("memSize");
      try
      {
        memSizeInt[i] = Integer.decode(memSize[i]);
      }
      catch (NullPointerException|NumberFormatException ex)
      {
        memSizeInt[i] = Integer.valueOf(-1);
      }
      featureSet[i] = m.group("featureSet");
      featureSetNum[i] = m.group("featureSetNum");
      pinoutCode[i] = m.group("pinoutCode");
      try
      {
        pinoutCodeInt[i] = Integer.valueOf(Integer.parseInt(pinoutCode[i]));
      }
      catch (NullPointerException|NumberFormatException ex)
      {
        pinoutCodeInt[i] = Integer.valueOf(-1);
      }
      suffix[i] = m.group("suffix");
    }
    if ((devClass[0] == null) || (devClass[1] == null) || (!devClass[0].equals(devClass[1])))
    {
      if ((devClass[0].startsWith("dsPIC")) && (!devClass[1].startsWith("dsPIC")))
      {
        return -1;
      }
      if ((devClass[1].startsWith("dsPIC")) && (!devClass[0].startsWith("dsPIC")))
      {
        return 1;
      }
      
      return x.compareTo(y);
    }
    
    if (!featureSet[1].equals(featureSet[0]))
    {
      return featureSet[1].compareTo(featureSet[0]);
    }
    if (!memSize[1].equals(memSize[0]))
    {
      return memSizeInt[1].compareTo(memSizeInt[0]);
    }
    if (!pinoutCode[1].equals(pinoutCode[0]))
    {
      return pinoutCodeInt[1].compareTo(pinoutCodeInt[0]);
    }
    if (!featureSetNum[1].equals(featureSetNum[0]))
    {
      return featureSetNum[1].compareTo(featureSetNum[0]);
    }
    if (!suffix[0].equals(suffix[1]))
    {
      return suffix[0].compareTo(suffix[1]);
    }
    return x.compareTo(y);
  }
}
